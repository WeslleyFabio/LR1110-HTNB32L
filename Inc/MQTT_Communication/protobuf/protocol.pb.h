/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_IOT_PROTOCOL_PB_H_INCLUDED
#define PB_IOT_PROTOCOL_PB_H_INCLUDED
#include "MQTT_Communication\protobuf\pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _iot_DeviceMode
{
    iot_DeviceMode_MANUFACTURING = 0, /* O dispotivio entrará em modo de configuração */
    iot_DeviceMode_ACTIVE = 1,        /* O dispositivo está sendo pesquisado (a frequência está fixa e é maior do que a padrão). */
    iot_DeviceMode_SEARCHING = 2,     /* O dispositivo está sendo procurado (a frequência está fixa e maior do que a padrão). */
    iot_DeviceMode_HIBERNATION = 3    /* O dispotivo está hibernando (a frequência está fixa e maior do que a padrão). */
} iot_DeviceMode;

/* TODO: Criar nova lib protobuf em C */
typedef enum _iot_DeviceLogMode
{
    iot_DeviceLogMode_NONE = 0,    /* Caso não haja valor para mudança de logs (Necessário por conta da sintaxe do protobuf) */
    iot_DeviceLogMode_NO_LOGS = 1, /* Configuração para que não haja exibição de logs na serial */
    iot_DeviceLogMode_ERROR = 2,   /* Configuração para que apenas mensagens de erros apareçam na serial */
    iot_DeviceLogMode_INFO = 3,    /* Configuração para que mensagens de erros e informações pertinentes sejam exibidas na serial */
    iot_DeviceLogMode_DEBUG = 4    /* Configuração para que haja a possibilidade de depuração da placa */
} iot_DeviceLogMode;

/* Struct definitions */
typedef struct _iot_ChangeDeviceModeCommand
{
    iot_DeviceMode desired_mode; /* Modo em que a placa irá funcionar */
    int64_t set_period_sleep;    /* Tempo que a placa irá dormir */
    iot_DeviceLogMode log_mode;  /* Configuração dos nívels de log */
} iot_ChangeDeviceModeCommand;

typedef struct _iot_ServerToDeviceMessage
{
    bool has_change_mode_command;
    iot_ChangeDeviceModeCommand change_mode_command; /* Mensagem que contém os dados para mudanças de modos */
} iot_ServerToDeviceMessage;

typedef struct _iot_FirmwareVersion
{
    int32_t major; /* Número mais significativo numa versão de um software/firmware - Versão principal */
    int32_t minor; /* Número intermediário numa versão de um software/firmware - Versão + adicionais */
    int32_t patch; /* Número menos significativo numa versão de um software/firmware - Correções sem modificações de versão */
} iot_FirmwareVersion;

typedef struct _iot_CellData
{
    int64_t cell_id;         /* Indentificação da célula */
    int32_t mcc;             /* MCC -  Código de País Móvel */
    int32_t mnc;             /* MNC - Código Corporação multinacional. */
    int32_t lac;             /* LAC - Código de Área de Localização */
    int32_t signal_strength; /* * -1 - Força do sinal */
} iot_CellData;

typedef struct _iot_WifiInfo
{
    pb_size_t mac_count;
    uint32_t mac[6];  /* Sem mudanças, o valor mínimo no protobuf é 32bits */
    uint32_t rssi;    /* Informação retirada do firmware, porém deixada no protobuf para futuros usos */
    uint32_t channel; /* Informação retirada do firmware, porém deixada no protobuf para futuros usos */
} iot_WifiInfo;

typedef struct _iot_DeviceTrackingData
{
    int64_t timestamp;           /* Timestamp deste posicionamento. */
    iot_DeviceMode desired_mode; /* Modo de funcionamento escolhido */
    int32_t temperature;         /* * 10  // Temperatura medida */
    int32_t battery;             /* Porcetagem da bateria */
    bool tamper_violation;       /* Estado do tamper (violado ou não-violado) */
    bool has_firmware_version;
    iot_FirmwareVersion firmware_version; /* Versão do firmware embarcado na placa */
    bool has_bts_nearby;
    iot_CellData bts_nearby; /* Informações sobre as torres próximas */
    pb_size_t wifi_data_count;
    iot_WifiInfo wifi_data[6]; /* Dados do wifi */
    int32_t status_code;       /* Sem mudança no tipo da variável ainda existe muito espaço para armazenamento de erros */
    int64_t sleep_period;      /* Tempo que a placa irá dormir */
} iot_DeviceTrackingData;

typedef struct _iot_DeviceTrackingDataMessage
{
    pb_size_t tracking_data_count;
    iot_DeviceTrackingData tracking_data[6]; /* Dados de rastreio atuais e antigos, se houver. */
} iot_DeviceTrackingDataMessage;

typedef struct _iot_DeviceToServerMessage
{
    bool has_tracking_data_message;
    iot_DeviceTrackingDataMessage tracking_data_message; /* Mensagem com dados de rastreio da placa */
} iot_DeviceToServerMessage;

#ifdef __cplusplus
extern "C"
{
#endif

/* Helper constants for enums */
#define _iot_DeviceMode_MIN iot_DeviceMode_MANUFACTURING
#define _iot_DeviceMode_MAX iot_DeviceMode_HIBERNATION
#define _iot_DeviceMode_ARRAYSIZE ((iot_DeviceMode)(iot_DeviceMode_HIBERNATION + 1))

#define _iot_DeviceLogMode_MIN iot_DeviceLogMode_NONE
#define _iot_DeviceLogMode_MAX iot_DeviceLogMode_DEBUG
#define _iot_DeviceLogMode_ARRAYSIZE ((iot_DeviceLogMode)(iot_DeviceLogMode_DEBUG + 1))

#define iot_ChangeDeviceModeCommand_desired_mode_ENUMTYPE iot_DeviceMode
#define iot_ChangeDeviceModeCommand_log_mode_ENUMTYPE iot_DeviceLogMode

#define iot_DeviceTrackingData_desired_mode_ENUMTYPE iot_DeviceMode

/* Initializer values for message structs */
#define iot_ServerToDeviceMessage_init_default {false, iot_ChangeDeviceModeCommand_init_default}
#define iot_ChangeDeviceModeCommand_init_default {_iot_DeviceMode_MIN, 0, _iot_DeviceLogMode_MIN}
#define iot_DeviceToServerMessage_init_default {false, iot_DeviceTrackingDataMessage_init_default}
#define iot_DeviceTrackingDataMessage_init_default                                                                                                                                                                                          \
    {                                                                                                                                                                                                                                       \
        0, { iot_DeviceTrackingData_init_default, iot_DeviceTrackingData_init_default, iot_DeviceTrackingData_init_default, iot_DeviceTrackingData_init_default, iot_DeviceTrackingData_init_default, iot_DeviceTrackingData_init_default } \
    }
#define iot_DeviceTrackingData_init_default {0, _iot_DeviceMode_MIN, 0, 0, 0, false, iot_FirmwareVersion_init_default, false, iot_CellData_init_default, 0, {iot_WifiInfo_init_default, iot_WifiInfo_init_default, iot_WifiInfo_init_default, iot_WifiInfo_init_default, iot_WifiInfo_init_default, iot_WifiInfo_init_default}, 0, 0}
#define iot_FirmwareVersion_init_default {0, 0, 0}
#define iot_CellData_init_default {0, 0, 0, 0, 0}
#define iot_WifiInfo_init_default {0, {0, 0, 0, 0, 0, 0}, 0, 0}
#define iot_ServerToDeviceMessage_init_zero {false, iot_ChangeDeviceModeCommand_init_zero}
#define iot_ChangeDeviceModeCommand_init_zero {_iot_DeviceMode_MIN, 0, _iot_DeviceLogMode_MIN}
#define iot_DeviceToServerMessage_init_zero {false, iot_DeviceTrackingDataMessage_init_zero}
#define iot_DeviceTrackingDataMessage_init_zero                                                                                                                                                                           \
    {                                                                                                                                                                                                                     \
        0, { iot_DeviceTrackingData_init_zero, iot_DeviceTrackingData_init_zero, iot_DeviceTrackingData_init_zero, iot_DeviceTrackingData_init_zero, iot_DeviceTrackingData_init_zero, iot_DeviceTrackingData_init_zero } \
    }
#define iot_DeviceTrackingData_init_zero {0, _iot_DeviceMode_MIN, 0, 0, 0, false, iot_FirmwareVersion_init_zero, false, iot_CellData_init_zero, 0, {iot_WifiInfo_init_zero, iot_WifiInfo_init_zero, iot_WifiInfo_init_zero, iot_WifiInfo_init_zero, iot_WifiInfo_init_zero, iot_WifiInfo_init_zero}, 0, 0}
#define iot_FirmwareVersion_init_zero {0, 0, 0}
#define iot_CellData_init_zero {0, 0, 0, 0, 0}
#define iot_WifiInfo_init_zero {0, {0, 0, 0, 0, 0, 0}, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define iot_ChangeDeviceModeCommand_desired_mode_tag 1
#define iot_ChangeDeviceModeCommand_set_period_sleep_tag 2
#define iot_ChangeDeviceModeCommand_log_mode_tag 3
#define iot_ServerToDeviceMessage_change_mode_command_tag 1
#define iot_FirmwareVersion_major_tag 1
#define iot_FirmwareVersion_minor_tag 2
#define iot_FirmwareVersion_patch_tag 3
#define iot_CellData_cell_id_tag 1
#define iot_CellData_mcc_tag 2
#define iot_CellData_mnc_tag 3
#define iot_CellData_lac_tag 4
#define iot_CellData_signal_strength_tag 5
#define iot_WifiInfo_mac_tag 1
#define iot_WifiInfo_rssi_tag 2
#define iot_WifiInfo_channel_tag 3
#define iot_DeviceTrackingData_timestamp_tag 1
#define iot_DeviceTrackingData_desired_mode_tag 2
#define iot_DeviceTrackingData_temperature_tag 3
#define iot_DeviceTrackingData_battery_tag 4
#define iot_DeviceTrackingData_tamper_violation_tag 5
#define iot_DeviceTrackingData_firmware_version_tag 6
#define iot_DeviceTrackingData_bts_nearby_tag 7
#define iot_DeviceTrackingData_wifi_data_tag 8
#define iot_DeviceTrackingData_status_code_tag 9
#define iot_DeviceTrackingData_sleep_period_tag 10
#define iot_DeviceTrackingDataMessage_tracking_data_tag 1
#define iot_DeviceToServerMessage_tracking_data_message_tag 1

/* Struct field encoding specification for nanopb */
#define iot_ServerToDeviceMessage_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, change_mode_command, 1)
#define iot_ServerToDeviceMessage_CALLBACK NULL
#define iot_ServerToDeviceMessage_DEFAULT NULL
#define iot_ServerToDeviceMessage_change_mode_command_MSGTYPE iot_ChangeDeviceModeCommand

#define iot_ChangeDeviceModeCommand_FIELDLIST(X, a)    \
    X(a, STATIC, SINGULAR, UENUM, desired_mode, 1)     \
    X(a, STATIC, SINGULAR, INT64, set_period_sleep, 2) \
    X(a, STATIC, SINGULAR, UENUM, log_mode, 3)
#define iot_ChangeDeviceModeCommand_CALLBACK NULL
#define iot_ChangeDeviceModeCommand_DEFAULT NULL

#define iot_DeviceToServerMessage_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, tracking_data_message, 1)
#define iot_DeviceToServerMessage_CALLBACK NULL
#define iot_DeviceToServerMessage_DEFAULT NULL
#define iot_DeviceToServerMessage_tracking_data_message_MSGTYPE iot_DeviceTrackingDataMessage

#define iot_DeviceTrackingDataMessage_FIELDLIST(X, a) \
    X(a, STATIC, REPEATED, MESSAGE, tracking_data, 1)
#define iot_DeviceTrackingDataMessage_CALLBACK NULL
#define iot_DeviceTrackingDataMessage_DEFAULT NULL
#define iot_DeviceTrackingDataMessage_tracking_data_MSGTYPE iot_DeviceTrackingData

#define iot_DeviceTrackingData_FIELDLIST(X, a)           \
    X(a, STATIC, SINGULAR, INT64, timestamp, 1)          \
    X(a, STATIC, SINGULAR, UENUM, desired_mode, 2)       \
    X(a, STATIC, SINGULAR, INT32, temperature, 3)        \
    X(a, STATIC, SINGULAR, INT32, battery, 4)            \
    X(a, STATIC, SINGULAR, BOOL, tamper_violation, 5)    \
    X(a, STATIC, OPTIONAL, MESSAGE, firmware_version, 6) \
    X(a, STATIC, OPTIONAL, MESSAGE, bts_nearby, 7)       \
    X(a, STATIC, REPEATED, MESSAGE, wifi_data, 8)        \
    X(a, STATIC, SINGULAR, INT32, status_code, 9)        \
    X(a, STATIC, SINGULAR, INT64, sleep_period, 10)
#define iot_DeviceTrackingData_CALLBACK NULL
#define iot_DeviceTrackingData_DEFAULT NULL
#define iot_DeviceTrackingData_firmware_version_MSGTYPE iot_FirmwareVersion
#define iot_DeviceTrackingData_bts_nearby_MSGTYPE iot_CellData
#define iot_DeviceTrackingData_wifi_data_MSGTYPE iot_WifiInfo

#define iot_FirmwareVersion_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, INT32, major, 1) \
    X(a, STATIC, SINGULAR, INT32, minor, 2) \
    X(a, STATIC, SINGULAR, INT32, patch, 3)
#define iot_FirmwareVersion_CALLBACK NULL
#define iot_FirmwareVersion_DEFAULT NULL

#define iot_CellData_FIELDLIST(X, a)          \
    X(a, STATIC, SINGULAR, INT64, cell_id, 1) \
    X(a, STATIC, SINGULAR, INT32, mcc, 2)     \
    X(a, STATIC, SINGULAR, INT32, mnc, 3)     \
    X(a, STATIC, SINGULAR, INT32, lac, 4)     \
    X(a, STATIC, SINGULAR, INT32, signal_strength, 5)
#define iot_CellData_CALLBACK NULL
#define iot_CellData_DEFAULT NULL

#define iot_WifiInfo_FIELDLIST(X, a)        \
    X(a, STATIC, REPEATED, UINT32, mac, 1)  \
    X(a, STATIC, SINGULAR, UINT32, rssi, 2) \
    X(a, STATIC, SINGULAR, UINT32, channel, 3)
#define iot_WifiInfo_CALLBACK NULL
#define iot_WifiInfo_DEFAULT NULL

    extern const pb_msgdesc_t iot_ServerToDeviceMessage_msg;
    extern const pb_msgdesc_t iot_ChangeDeviceModeCommand_msg;
    extern const pb_msgdesc_t iot_DeviceToServerMessage_msg;
    extern const pb_msgdesc_t iot_DeviceTrackingDataMessage_msg;
    extern const pb_msgdesc_t iot_DeviceTrackingData_msg;
    extern const pb_msgdesc_t iot_FirmwareVersion_msg;
    extern const pb_msgdesc_t iot_CellData_msg;
    extern const pb_msgdesc_t iot_WifiInfo_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define iot_ServerToDeviceMessage_fields &iot_ServerToDeviceMessage_msg
#define iot_ChangeDeviceModeCommand_fields &iot_ChangeDeviceModeCommand_msg
#define iot_DeviceToServerMessage_fields &iot_DeviceToServerMessage_msg
#define iot_DeviceTrackingDataMessage_fields &iot_DeviceTrackingDataMessage_msg
#define iot_DeviceTrackingData_fields &iot_DeviceTrackingData_msg
#define iot_FirmwareVersion_fields &iot_FirmwareVersion_msg
#define iot_CellData_fields &iot_CellData_msg
#define iot_WifiInfo_fields &iot_WifiInfo_msg

/* Maximum encoded size of messages (where known) */
#define iot_CellData_size 55
#define iot_ChangeDeviceModeCommand_size 15
#define iot_DeviceToServerMessage_size 2727
#define iot_DeviceTrackingDataMessage_size 2724
#define iot_DeviceTrackingData_size 451
#define iot_FirmwareVersion_size 33
#define iot_ServerToDeviceMessage_size 17
#define iot_WifiInfo_size 48

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
